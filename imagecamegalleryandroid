package com.example.mydemoapplication;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.format.Formatter;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class PickImagefromGallery extends AppCompatActivity {
    Button BSelectImage;
    Context context;
    String encodeimg1 = "", cartkey;
    String path = "";
    // One Preview Image
    ImageView IVPreviewImage;
    TextView txtimagesize;

    // constant to compare
    // the activity result code
    int SELECT_PICTURE = 200;
    File originalimage;
    private String userChoosenTask;
    private int REQUEST_CAMERA = 0, SELECT_FILE = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pick_imagefrom_gallery);
        context=PickImagefromGallery.this;
        BSelectImage = findViewById(R.id.BSelectImage);
        IVPreviewImage = findViewById(R.id.IVPreviewImage);
        txtimagesize=(TextView)findViewById(R.id.txtimagesize);


        BSelectImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
               /* imageChooser();*/
                selectImage();
            }

            private void selectImage() {
                final CharSequence[] items = {"Take Photo", "Choose from Library", "Cancel"};
                AlertDialog.Builder builder = new AlertDialog.Builder(PickImagefromGallery.this);
                builder.setTitle("Upload Photo!");
                builder.setItems(items, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int item) {
                        if (items[item].equals("Take Photo")) {
                            userChoosenTask = "Take Photo";
                            if (ContextCompat.checkSelfPermission(PickImagefromGallery.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                                ActivityCompat.requestPermissions(PickImagefromGallery.this, new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CAMERA);
                            } else {
                                cameraIntent();
                            }
                        } else if (items[item].equals("Choose from Library")) {
                            userChoosenTask = "Choose from Library";
                            galleryIntent();
                            /*if (ContextCompat.checkSelfPermission(PickImagefromGallery.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                                ActivityCompat.requestPermissions(PickImagefromGallery.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, SELECT_FILE);
                            } else {

                            }*/
                        } else if (items[item].equals("Cancel")) {
                            dialog.dismiss();
                        }
                     }

                    private void galleryIntent() {
                        System.out.println("GALLERY OPEN 22");

                        Intent intent = new Intent();
                        intent.setType("image/*");
                        intent.setAction(Intent.ACTION_GET_CONTENT);//
                        startActivityForResult(Intent.createChooser(intent, "Select File"), SELECT_FILE);
                    }

                    private void cameraIntent() {
                        try{
                            System.out.println("CAMERA OPEN 22");
                            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                            startActivityForResult(intent, REQUEST_CAMERA);
                        }catch (Exception e) {
                            e.printStackTrace();
                        }}
                });
                builder.show();
                }
        }    );
    }

    void imageChooser() {
        Intent i = new Intent();
        i.setType("image/*");
        i.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(i, "Select Picture"), SELECT_PICTURE);
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
       /* if (resultCode == RESULT_OK) {
            if (requestCode == SELECT_PICTURE) {
                Uri selectedImageUri = data.getData();

                try {
                    final InputStream inputStream=getContentResolver().openInputStream(selectedImageUri);
                    final Bitmap bitmap= BitmapFactory.decodeStream(inputStream);
                     originalimage=new File(selectedImageUri.getPath().replace("raw/",""));



                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                    byte[] imageInByte = stream.toByteArray();


                    // Get length of file in bytes
                    float imageSizeInBytes = imageInByte.length;
                    // Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
                    float imageSizeInKB = imageSizeInBytes / 1024;
                    // Convert the KB to MegaBytes (1 MB = 1024 KBytes)
                    float imageSizeInMB = imageSizeInKB / 1024;
                    txtimagesize.setText("size is : "+ imageSizeInBytes+ " Kb  "+imageSizeInKB);
                  System.out.println("Imagesize" + imageSizeInKB +"  "+ imageSizeInMB);
                   }catch (Exception e){
                    e.printStackTrace();


                }
                if (null != selectedImageUri) {
                    IVPreviewImage.setImageURI(selectedImageUri);
                    txtimagesize.setVisibility(View.VISIBLE);
                    //txtimagesize.setText("Size Image :" + Formatter.formatFileSize(this,originalimage.length()));
                    System.out.println("dataSize"+ "  "+ Formatter.formatFileSize(this,originalimage.length()));
                    float length = originalimage.length();
                    length = length/1024;
                    System.out.println("File Path : " + originalimage.getPath() + ", File size : " + length +" KB");

                    Bitmap bitmap = null;
                    try {
                        bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), selectedImageUri);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }




      // Log.e("Size of image :", +Formatter.formatFileSize(this, originalimage.length()));


                }
            }
        }*/ //old code
        if (resultCode == RESULT_OK) {
            if (requestCode == SELECT_FILE) {
                try {
                    onSelectFromGalleryResultProfile(data);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (requestCode == REQUEST_CAMERA) {

                onCaptureImageResultProfile(data);

            }
        }


    }

    private void onSelectFromGalleryResultProfile(Intent data) {
        Bitmap bm = null;
        if (data != null) {
            try {
                bm = MediaStore.Images.Media.getBitmap(getContentResolver(), data.getData());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        BitmapDrawable d = new BitmapDrawable(bm);
        int left = 0;
        int top = 0;
        int right = 40;
        int bottom = 40;
        Rect r = new Rect(left, top, right, bottom);
        d.setBounds(r);
        Uri tempUri = getImageUri(context, bm);
        System.out.println("data.getData() " + data.getData());
        encodeimg1 = getRealPathFromURI(tempUri);
        System.out.println("ProfilePicPath  " + encodeimg1);

        IVPreviewImage.setImageDrawable(d);
      }
    public Uri getImageUri(Context inContext, Bitmap inImage) {
        try {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
            path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "" + System.currentTimeMillis(), null);

        }catch (Exception e) {
            e.printStackTrace();
        }
        return Uri.parse(path);
    }

    private String getRealPathFromURI(Uri contentURI) {
        String result;
        String[] projection = {MediaStore.Images.Media.DATA};
        Cursor cursor = getContentResolver().query(contentURI, projection, null, null, null);
        if (cursor == null) {
            result = contentURI.getPath();
        }else{
            cursor.moveToFirst();
            int idx = 0;
            idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            result = cursor.getString(idx);

            System.out.println("ProfilePicPathidx" + idx);
            System.out.println("ProfilePicPathresult" + result);

            cursor.close();}
        return result;
         }
    private void onCaptureImageResultProfile(Intent data) {
        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        thumbnail.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        File destination = new File(Environment.getExternalStorageDirectory(), "" + System.currentTimeMillis() + ".jpg");
        //destination.length();
        FileOutputStream fo;
        try {
            destination.createNewFile();
            fo = new FileOutputStream(destination);
            fo.write(bytes.toByteArray());
            fo.close();
        }catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (IOException e) {
            e.printStackTrace();}
        Uri tempUri = getImageUri(context, thumbnail);
        encodeimg1 = getRealPathFromURI(tempUri);
        IVPreviewImage.setImageBitmap(thumbnail);
        }
      }
